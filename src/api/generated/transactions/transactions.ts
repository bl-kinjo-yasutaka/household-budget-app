/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetTransactionsParams,
  Transaction,
  TransactionCreate,
  TransactionUpdate
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';




/**
 * @summary ÂèñÂºï‰∏ÄË¶ßÂèñÂæó
 */
export type getTransactionsResponse200 = {
  data: Transaction[]
  status: 200
}
    
export type getTransactionsResponseComposite = getTransactionsResponse200;
    
export type getTransactionsResponse = getTransactionsResponseComposite & {
  headers: Headers;
}

export const getGetTransactionsUrl = (params?: GetTransactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/transactions?${stringifiedParams}` : `/transactions`
}

export const getTransactions = async (params?: GetTransactionsParams, options?: RequestInit): Promise<getTransactionsResponse> => {
  
  return customInstance<getTransactionsResponse>(getGetTransactionsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetTransactionsQueryKey = (params?: GetTransactionsParams,) => {
    return [`/transactions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactions>>> = ({ signal }) => getTransactions(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactions>>>
export type GetTransactionsQueryError = unknown


export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params: undefined |  GetTransactionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactions>>,
          TError,
          Awaited<ReturnType<typeof getTransactions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactions>>,
          TError,
          Awaited<ReturnType<typeof getTransactions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂèñÂºï‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèñÂºï‰ΩúÊàê
 */
export type postTransactionsResponse201 = {
  data: Transaction
  status: 201
}
    
export type postTransactionsResponseComposite = postTransactionsResponse201;
    
export type postTransactionsResponse = postTransactionsResponseComposite & {
  headers: Headers;
}

export const getPostTransactionsUrl = () => {


  

  return `/transactions`
}

export const postTransactions = async (transactionCreate: TransactionCreate, options?: RequestInit): Promise<postTransactionsResponse> => {
  
  return customInstance<postTransactionsResponse>(getPostTransactionsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      transactionCreate,)
  }
);}




export const getPostTransactionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError,{data: TransactionCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError,{data: TransactionCreate}, TContext> => {

const mutationKey = ['postTransactions'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTransactions>>, {data: TransactionCreate}> = (props) => {
          const {data} = props ?? {};

          return  postTransactions(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof postTransactions>>>
    export type PostTransactionsMutationBody = TransactionCreate
    export type PostTransactionsMutationError = unknown

    /**
 * @summary ÂèñÂºï‰ΩúÊàê
 */
export const usePostTransactions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError,{data: TransactionCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postTransactions>>,
        TError,
        {data: TransactionCreate},
        TContext
      > => {

      const mutationOptions = getPostTransactionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary ÂèñÂºïÂèñÂæó
 */
export type getTransactionsIdResponse200 = {
  data: Transaction
  status: 200
}

export type getTransactionsIdResponse404 = {
  data: void
  status: 404
}
    
export type getTransactionsIdResponseComposite = getTransactionsIdResponse200 | getTransactionsIdResponse404;
    
export type getTransactionsIdResponse = getTransactionsIdResponseComposite & {
  headers: Headers;
}

export const getGetTransactionsIdUrl = (id: number,) => {


  

  return `/transactions/${id}`
}

export const getTransactionsId = async (id: number, options?: RequestInit): Promise<getTransactionsIdResponse> => {
  
  return customInstance<getTransactionsIdResponse>(getGetTransactionsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetTransactionsIdQueryKey = (id: number,) => {
    return [`/transactions/${id}`] as const;
    }

    
export const getGetTransactionsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactionsId>>> = ({ signal }) => getTransactionsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactionsId>>>
export type GetTransactionsIdQueryError = void


export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionsId>>,
          TError,
          Awaited<ReturnType<typeof getTransactionsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionsId>>,
          TError,
          Awaited<ReturnType<typeof getTransactionsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂèñÂºïÂèñÂæó
 */

export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèñÂºïÊõ¥Êñ∞
 */
export type putTransactionsIdResponse200 = {
  data: Transaction
  status: 200
}

export type putTransactionsIdResponse404 = {
  data: void
  status: 404
}
    
export type putTransactionsIdResponseComposite = putTransactionsIdResponse200 | putTransactionsIdResponse404;
    
export type putTransactionsIdResponse = putTransactionsIdResponseComposite & {
  headers: Headers;
}

export const getPutTransactionsIdUrl = (id: number,) => {


  

  return `/transactions/${id}`
}

export const putTransactionsId = async (id: number,
    transactionUpdate: TransactionUpdate, options?: RequestInit): Promise<putTransactionsIdResponse> => {
  
  return customInstance<putTransactionsIdResponse>(getPutTransactionsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      transactionUpdate,)
  }
);}




export const getPutTransactionsIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTransactionsId>>, TError,{id: number;data: TransactionUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putTransactionsId>>, TError,{id: number;data: TransactionUpdate}, TContext> => {

const mutationKey = ['putTransactionsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTransactionsId>>, {id: number;data: TransactionUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  putTransactionsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTransactionsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTransactionsId>>>
    export type PutTransactionsIdMutationBody = TransactionUpdate
    export type PutTransactionsIdMutationError = void

    /**
 * @summary ÂèñÂºïÊõ¥Êñ∞
 */
export const usePutTransactionsId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTransactionsId>>, TError,{id: number;data: TransactionUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putTransactionsId>>,
        TError,
        {id: number;data: TransactionUpdate},
        TContext
      > => {

      const mutationOptions = getPutTransactionsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary ÂèñÂºïÂâäÈô§
 */
export type deleteTransactionsIdResponse204 = {
  data: void
  status: 204
}

export type deleteTransactionsIdResponse404 = {
  data: void
  status: 404
}
    
export type deleteTransactionsIdResponseComposite = deleteTransactionsIdResponse204 | deleteTransactionsIdResponse404;
    
export type deleteTransactionsIdResponse = deleteTransactionsIdResponseComposite & {
  headers: Headers;
}

export const getDeleteTransactionsIdUrl = (id: number,) => {


  

  return `/transactions/${id}`
}

export const deleteTransactionsId = async (id: number, options?: RequestInit): Promise<deleteTransactionsIdResponse> => {
  
  return customInstance<deleteTransactionsIdResponse>(getDeleteTransactionsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteTransactionsIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteTransactionsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTransactionsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTransactionsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTransactionsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTransactionsId>>>
    
    export type DeleteTransactionsIdMutationError = void

    /**
 * @summary ÂèñÂºïÂâäÈô§
 */
export const useDeleteTransactionsId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionsId>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTransactionsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTransactionsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    