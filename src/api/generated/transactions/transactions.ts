/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.2
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetTransactionsParams,
  GetTransactionsRecentParams,
  Transaction,
  TransactionCreate,
  TransactionListResponse,
  TransactionUpdate
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary ÂèñÂºï‰∏ÄË¶ßÂèñÂæó
 */
export const getTransactions = (
    params?: GetTransactionsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TransactionListResponse>(
      {url: `/transactions`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTransactionsQueryKey = (params?: GetTransactionsParams,) => {
    return [`/transactions`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactions>>> = ({ signal }) => getTransactions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactions>>>
export type GetTransactionsQueryError = unknown


export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params: undefined |  GetTransactionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactions>>,
          TError,
          Awaited<ReturnType<typeof getTransactions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactions>>,
          TError,
          Awaited<ReturnType<typeof getTransactions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂèñÂºï‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTransactions<TData = Awaited<ReturnType<typeof getTransactions>>, TError = unknown>(
 params?: GetTransactionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèñÂºï‰ΩúÊàê
 */
export const postTransactions = (
    transactionCreate: TransactionCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Transaction>(
      {url: `/transactions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: transactionCreate, signal
    },
      options);
    }
  


export const getPostTransactionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError,{data: TransactionCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError,{data: TransactionCreate}, TContext> => {

const mutationKey = ['postTransactions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTransactions>>, {data: TransactionCreate}> = (props) => {
          const {data} = props ?? {};

          return  postTransactions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTransactionsMutationResult = NonNullable<Awaited<ReturnType<typeof postTransactions>>>
    export type PostTransactionsMutationBody = TransactionCreate
    export type PostTransactionsMutationError = unknown

    /**
 * @summary ÂèñÂºï‰ΩúÊàê
 */
export const usePostTransactions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTransactions>>, TError,{data: TransactionCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postTransactions>>,
        TError,
        {data: TransactionCreate},
        TContext
      > => {

      const mutationOptions = getPostTransactionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary ÊúÄÊñ∞ÂèñÂºïÂèñÂæó
 */
export const getTransactionsRecent = (
    params?: GetTransactionsRecentParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Transaction[]>(
      {url: `/transactions/recent`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTransactionsRecentQueryKey = (params?: GetTransactionsRecentParams,) => {
    return [`/transactions/recent`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTransactionsRecentQueryOptions = <TData = Awaited<ReturnType<typeof getTransactionsRecent>>, TError = unknown>(params?: GetTransactionsRecentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsRecent>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionsRecentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactionsRecent>>> = ({ signal }) => getTransactionsRecent(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactionsRecent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionsRecentQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactionsRecent>>>
export type GetTransactionsRecentQueryError = unknown


export function useGetTransactionsRecent<TData = Awaited<ReturnType<typeof getTransactionsRecent>>, TError = unknown>(
 params: undefined |  GetTransactionsRecentParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsRecent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionsRecent>>,
          TError,
          Awaited<ReturnType<typeof getTransactionsRecent>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionsRecent<TData = Awaited<ReturnType<typeof getTransactionsRecent>>, TError = unknown>(
 params?: GetTransactionsRecentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsRecent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionsRecent>>,
          TError,
          Awaited<ReturnType<typeof getTransactionsRecent>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionsRecent<TData = Awaited<ReturnType<typeof getTransactionsRecent>>, TError = unknown>(
 params?: GetTransactionsRecentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsRecent>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÊúÄÊñ∞ÂèñÂºïÂèñÂæó
 */

export function useGetTransactionsRecent<TData = Awaited<ReturnType<typeof getTransactionsRecent>>, TError = unknown>(
 params?: GetTransactionsRecentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsRecent>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionsRecentQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèñÂºïÂèñÂæó
 */
export const getTransactionsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Transaction>(
      {url: `/transactions/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTransactionsIdQueryKey = (id: number,) => {
    return [`/transactions/${id}`] as const;
    }

    
export const getGetTransactionsIdQueryOptions = <TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTransactionsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactionsId>>> = ({ signal }) => getTransactionsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTransactionsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTransactionsId>>>
export type GetTransactionsIdQueryError = void


export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionsId>>,
          TError,
          Awaited<ReturnType<typeof getTransactionsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionsId>>,
          TError,
          Awaited<ReturnType<typeof getTransactionsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÂèñÂºïÂèñÂæó
 */

export function useGetTransactionsId<TData = Awaited<ReturnType<typeof getTransactionsId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTransactionsId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTransactionsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÂèñÂºïÊõ¥Êñ∞
 */
export const putTransactionsId = (
    id: number,
    transactionUpdate: TransactionUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Transaction>(
      {url: `/transactions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: transactionUpdate
    },
      options);
    }
  


export const getPutTransactionsIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTransactionsId>>, TError,{id: number;data: TransactionUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putTransactionsId>>, TError,{id: number;data: TransactionUpdate}, TContext> => {

const mutationKey = ['putTransactionsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTransactionsId>>, {id: number;data: TransactionUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  putTransactionsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTransactionsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTransactionsId>>>
    export type PutTransactionsIdMutationBody = TransactionUpdate
    export type PutTransactionsIdMutationError = void

    /**
 * @summary ÂèñÂºïÊõ¥Êñ∞
 */
export const usePutTransactionsId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTransactionsId>>, TError,{id: number;data: TransactionUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putTransactionsId>>,
        TError,
        {id: number;data: TransactionUpdate},
        TContext
      > => {

      const mutationOptions = getPutTransactionsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary ÂèñÂºïÂâäÈô§
 */
export const deleteTransactionsId = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/transactions/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTransactionsIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteTransactionsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTransactionsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteTransactionsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTransactionsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTransactionsId>>>
    
    export type DeleteTransactionsIdMutationError = void

    /**
 * @summary ÂèñÂºïÂâäÈô§
 */
export const useDeleteTransactionsId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTransactionsId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTransactionsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteTransactionsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    