/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.2
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  UserSettings,
  UserSettingsUpdate
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary „É¶„Éº„Ç∂„ÉºË®≠ÂÆöÂèñÂæó
 */
export const getUserSettings = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserSettings>(
      {url: `/user/settings`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserSettingsQueryKey = () => {
    return [`/user/settings`] as const;
    }

    
export const getGetUserSettingsQueryOptions = <TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserSettingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSettings>>> = ({ signal }) => getUserSettings(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSettings>>>
export type GetUserSettingsQueryError = unknown


export function useGetUserSettings<TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSettings>>,
          TError,
          Awaited<ReturnType<typeof getUserSettings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserSettings<TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserSettings>>,
          TError,
          Awaited<ReturnType<typeof getUserSettings>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserSettings<TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É¶„Éº„Ç∂„ÉºË®≠ÂÆöÂèñÂæó
 */

export function useGetUserSettings<TData = Awaited<ReturnType<typeof getUserSettings>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserSettings>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserSettingsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „É¶„Éº„Ç∂„ÉºË®≠ÂÆöÊõ¥Êñ∞
 */
export const putUserSettings = (
    userSettingsUpdate: UserSettingsUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserSettings>(
      {url: `/user/settings`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userSettingsUpdate
    },
      options);
    }
  


export const getPutUserSettingsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserSettings>>, TError,{data: UserSettingsUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putUserSettings>>, TError,{data: UserSettingsUpdate}, TContext> => {

const mutationKey = ['putUserSettings'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUserSettings>>, {data: UserSettingsUpdate}> = (props) => {
          const {data} = props ?? {};

          return  putUserSettings(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUserSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof putUserSettings>>>
    export type PutUserSettingsMutationBody = UserSettingsUpdate
    export type PutUserSettingsMutationError = unknown

    /**
 * @summary „É¶„Éº„Ç∂„ÉºË®≠ÂÆöÊõ¥Êñ∞
 */
export const usePutUserSettings = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserSettings>>, TError,{data: UserSettingsUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putUserSettings>>,
        TError,
        {data: UserSettingsUpdate},
        TContext
      > => {

      const mutationOptions = getPutUserSettingsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    