/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Expense App API
 * MVP 用の最小家計簿 API。
認証は JWT（Bearer トークン）方式。

 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  UserSettings
} from '.././model';


export const getGetUserSettingsResponseMock = (overrideResponse: Partial< UserSettings > = {}): UserSettings => ({currency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 3}}), undefined]), startWeekday: faker.helpers.arrayElement([faker.number.int({min: 0, max: 6}), undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getPutUserSettingsResponseMock = (overrideResponse: Partial< UserSettings > = {}): UserSettings => ({currency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 3}}), undefined]), startWeekday: faker.helpers.arrayElement([faker.number.int({min: 0, max: 6}), undefined]), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})


export const getGetUserSettingsMockHandler = (overrideResponse?: UserSettings | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserSettings> | UserSettings)) => {
  return http.get('*/user/settings', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetUserSettingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutUserSettingsMockHandler = (overrideResponse?: UserSettings | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UserSettings> | UserSettings)) => {
  return http.put('*/user/settings', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutUserSettingsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUserSettingsMock = () => [
  getGetUserSettingsMockHandler(),
  getPutUserSettingsMockHandler()
]
