/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  AuthResponse,
  LoginRequest,
  SignupRequest
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';




/**
 * @summary „É¶„Éº„Ç∂„ÉºÊñ∞Ë¶èÁôªÈå≤
 */
export type postAuthSignupResponse201 = {
  data: AuthResponse
  status: 201
}
    
export type postAuthSignupResponseComposite = postAuthSignupResponse201;
    
export type postAuthSignupResponse = postAuthSignupResponseComposite & {
  headers: Headers;
}

export const getPostAuthSignupUrl = () => {


  

  return `/auth/signup`
}

export const postAuthSignup = async (signupRequest: SignupRequest, options?: RequestInit): Promise<postAuthSignupResponse> => {
  
  return customInstance<postAuthSignupResponse>(getPostAuthSignupUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      signupRequest,)
  }
);}




export const getPostAuthSignupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: SignupRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: SignupRequest}, TContext> => {

const mutationKey = ['postAuthSignup'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignup>>, {data: SignupRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignup(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignup>>>
    export type PostAuthSignupMutationBody = SignupRequest
    export type PostAuthSignupMutationError = unknown

    /**
 * @summary „É¶„Éº„Ç∂„ÉºÊñ∞Ë¶èÁôªÈå≤
 */
export const usePostAuthSignup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: SignupRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignup>>,
        TError,
        {data: SignupRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export type postAuthLoginResponse200 = {
  data: AuthResponse
  status: 200
}

export type postAuthLoginResponse401 = {
  data: void
  status: 401
}
    
export type postAuthLoginResponseComposite = postAuthLoginResponse200 | postAuthLoginResponse401;
    
export type postAuthLoginResponse = postAuthLoginResponseComposite & {
  headers: Headers;
}

export const getPostAuthLoginUrl = () => {


  

  return `/auth/login`
}

export const postAuthLogin = async (loginRequest: LoginRequest, options?: RequestInit): Promise<postAuthLoginResponse> => {
  
  return customInstance<postAuthLoginResponse>(getPostAuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequest,)
  }
);}




export const getPostAuthLoginMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginRequest
    export type PostAuthLoginMutationError = void

    /**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const usePostAuthLogin = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    