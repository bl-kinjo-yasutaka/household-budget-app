/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.2
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  AuthResponse,
  LoginRequest,
  SignupRequest
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary „É¶„Éº„Ç∂„ÉºÊñ∞Ë¶èÁôªÈå≤
 */
export const postAuthSignup = (
    signupRequest: SignupRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AuthResponse>(
      {url: `/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signupRequest, signal
    },
      options);
    }
  


export const getPostAuthSignupMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: SignupRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: SignupRequest}, TContext> => {

const mutationKey = ['postAuthSignup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSignup>>, {data: SignupRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSignup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSignup>>>
    export type PostAuthSignupMutationBody = SignupRequest
    export type PostAuthSignupMutationError = unknown

    /**
 * @summary „É¶„Éº„Ç∂„ÉºÊñ∞Ë¶èÁôªÈå≤
 */
export const usePostAuthSignup = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSignup>>, TError,{data: SignupRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthSignup>>,
        TError,
        {data: SignupRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const postAuthLogin = (
    loginRequest: LoginRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AuthResponse>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest, signal
    },
      options);
    }
  


export const getPostAuthLoginMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginRequest
    export type PostAuthLoginMutationError = void

    /**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const usePostAuthLogin = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    