/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Expense App API
 * MVP 用の最小家計簿 API。
認証は JWT（Bearer トークン）方式。

 * OpenAPI spec version: 0.1.2
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  AuthResponse
} from '.././model';


export const getPostAuthSignupResponseMock = (overrideResponse: Partial< AuthResponse > = {}): AuthResponse => ({token: faker.string.alpha({length: {min: 10, max: 20}}), user: {id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getPostAuthLoginResponseMock = (overrideResponse: Partial< AuthResponse > = {}): AuthResponse => ({token: faker.string.alpha({length: {min: 10, max: 20}}), user: {id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), email: faker.internet.email(), name: faker.string.alpha({length: {min: 10, max: 20}}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})


export const getPostAuthSignupMockHandler = (overrideResponse?: AuthResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthResponse> | AuthResponse)) => {
  return http.post('*/auth/signup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostAuthSignupResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostAuthLoginMockHandler = (overrideResponse?: AuthResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthResponse> | AuthResponse)) => {
  return http.post('*/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostAuthLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthMock = () => [
  getPostAuthSignupMockHandler(),
  getPostAuthLoginMockHandler()
]
