/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Category,
  CategoryCreate,
  CategoryUpdate
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';




/**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ßÂèñÂæó
 */
export type getCategoriesResponse200 = {
  data: Category[]
  status: 200
}
    
export type getCategoriesResponseComposite = getCategoriesResponse200;
    
export type getCategoriesResponse = getCategoriesResponseComposite & {
  headers: Headers;
}

export const getGetCategoriesUrl = () => {


  

  return `/categories`
}

export const getCategories = async ( options?: RequestInit): Promise<getCategoriesResponse> => {
  
  return customInstance<getCategoriesResponse>(getGetCategoriesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetCategoriesQueryKey = () => {
    return [`/categories`] as const;
    }

    
export const getGetCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getCategories>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({ signal }) => getCategories(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>
export type GetCategoriesQueryError = unknown


export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          Awaited<ReturnType<typeof getCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          Awaited<ReturnType<typeof getCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ßÂèñÂæó
 */

export function useGetCategories<TData = Awaited<ReturnType<typeof getCategories>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰ΩúÊàê
 */
export type postCategoriesResponse201 = {
  data: Category
  status: 201
}
    
export type postCategoriesResponseComposite = postCategoriesResponse201;
    
export type postCategoriesResponse = postCategoriesResponseComposite & {
  headers: Headers;
}

export const getPostCategoriesUrl = () => {


  

  return `/categories`
}

export const postCategories = async (categoryCreate: CategoryCreate, options?: RequestInit): Promise<postCategoriesResponse> => {
  
  return customInstance<postCategoriesResponse>(getPostCategoriesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      categoryCreate,)
  }
);}




export const getPostCategoriesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCategories>>, TError,{data: CategoryCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postCategories>>, TError,{data: CategoryCreate}, TContext> => {

const mutationKey = ['postCategories'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCategories>>, {data: CategoryCreate}> = (props) => {
          const {data} = props ?? {};

          return  postCategories(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCategories>>>
    export type PostCategoriesMutationBody = CategoryCreate
    export type PostCategoriesMutationError = unknown

    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰ΩúÊàê
 */
export const usePostCategories = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCategories>>, TError,{data: CategoryCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postCategories>>,
        TError,
        {data: CategoryCreate},
        TContext
      > => {

      const mutationOptions = getPostCategoriesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™ÂèñÂæó
 */
export type getCategoriesIdResponse200 = {
  data: Category
  status: 200
}

export type getCategoriesIdResponse404 = {
  data: void
  status: 404
}
    
export type getCategoriesIdResponseComposite = getCategoriesIdResponse200 | getCategoriesIdResponse404;
    
export type getCategoriesIdResponse = getCategoriesIdResponseComposite & {
  headers: Headers;
}

export const getGetCategoriesIdUrl = (id: number,) => {


  

  return `/categories/${id}`
}

export const getCategoriesId = async (id: number, options?: RequestInit): Promise<getCategoriesIdResponse> => {
  
  return customInstance<getCategoriesIdResponse>(getGetCategoriesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetCategoriesIdQueryKey = (id: number,) => {
    return [`/categories/${id}`] as const;
    }

    
export const getGetCategoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = void>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesId>>> = ({ signal }) => getCategoriesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesId>>>
export type GetCategoriesIdQueryError = void


export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = void>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Ç´„ÉÜ„Ç¥„É™ÂèñÂæó
 */

export function useGetCategoriesId<TData = Awaited<ReturnType<typeof getCategoriesId>>, TError = void>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Ç´„ÉÜ„Ç¥„É™Êõ¥Êñ∞
 */
export type putCategoriesIdResponse200 = {
  data: Category
  status: 200
}

export type putCategoriesIdResponse404 = {
  data: void
  status: 404
}
    
export type putCategoriesIdResponseComposite = putCategoriesIdResponse200 | putCategoriesIdResponse404;
    
export type putCategoriesIdResponse = putCategoriesIdResponseComposite & {
  headers: Headers;
}

export const getPutCategoriesIdUrl = (id: number,) => {


  

  return `/categories/${id}`
}

export const putCategoriesId = async (id: number,
    categoryUpdate: CategoryUpdate, options?: RequestInit): Promise<putCategoriesIdResponse> => {
  
  return customInstance<putCategoriesIdResponse>(getPutCategoriesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      categoryUpdate,)
  }
);}




export const getPutCategoriesIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCategoriesId>>, TError,{id: number;data: CategoryUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putCategoriesId>>, TError,{id: number;data: CategoryUpdate}, TContext> => {

const mutationKey = ['putCategoriesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCategoriesId>>, {id: number;data: CategoryUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  putCategoriesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCategoriesId>>>
    export type PutCategoriesIdMutationBody = CategoryUpdate
    export type PutCategoriesIdMutationError = void

    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™Êõ¥Êñ∞
 */
export const usePutCategoriesId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCategoriesId>>, TError,{id: number;data: CategoryUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putCategoriesId>>,
        TError,
        {id: number;data: CategoryUpdate},
        TContext
      > => {

      const mutationOptions = getPutCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™ÂâäÈô§
 */
export type deleteCategoriesIdResponse204 = {
  data: void
  status: 204
}

export type deleteCategoriesIdResponse404 = {
  data: void
  status: 404
}
    
export type deleteCategoriesIdResponseComposite = deleteCategoriesIdResponse204 | deleteCategoriesIdResponse404;
    
export type deleteCategoriesIdResponse = deleteCategoriesIdResponseComposite & {
  headers: Headers;
}

export const getDeleteCategoriesIdUrl = (id: number,) => {


  

  return `/categories/${id}`
}

export const deleteCategoriesId = async (id: number, options?: RequestInit): Promise<deleteCategoriesIdResponse> => {
  
  return customInstance<deleteCategoriesIdResponse>(getDeleteCategoriesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteCategoriesIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategoriesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteCategoriesId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteCategoriesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCategoriesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCategoriesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCategoriesId>>>
    
    export type DeleteCategoriesIdMutationError = void

    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™ÂâäÈô§
 */
export const useDeleteCategoriesId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategoriesId>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCategoriesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    