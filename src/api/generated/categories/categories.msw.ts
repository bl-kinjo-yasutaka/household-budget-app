/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Expense App API
 * MVP 用の最小家計簿 API。
認証は JWT（Bearer トークン）方式。

 * OpenAPI spec version: 0.1.2
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Category
} from '.././model';


export const getGetCategoriesResponseMock = (): Category[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), userId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), name: faker.string.alpha({length: {min: 10, max: 20}}), colorHex: faker.helpers.fromRegExp('^#[0-9A-Fa-f]{6}$'), type: faker.helpers.arrayElement(['expense','income'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPostCategoriesResponseMock = (overrideResponse: Partial< Category > = {}): Category => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), userId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), name: faker.string.alpha({length: {min: 10, max: 20}}), colorHex: faker.helpers.fromRegExp('^#[0-9A-Fa-f]{6}$'), type: faker.helpers.arrayElement(['expense','income'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getGetCategoriesIdResponseMock = (overrideResponse: Partial< Category > = {}): Category => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), userId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), name: faker.string.alpha({length: {min: 10, max: 20}}), colorHex: faker.helpers.fromRegExp('^#[0-9A-Fa-f]{6}$'), type: faker.helpers.arrayElement(['expense','income'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getPutCategoriesIdResponseMock = (overrideResponse: Partial< Category > = {}): Category => ({id: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), userId: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), name: faker.string.alpha({length: {min: 10, max: 20}}), colorHex: faker.helpers.fromRegExp('^#[0-9A-Fa-f]{6}$'), type: faker.helpers.arrayElement(['expense','income'] as const), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})


export const getGetCategoriesMockHandler = (overrideResponse?: Category[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Category[]> | Category[])) => {
  return http.get('*/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetCategoriesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostCategoriesMockHandler = (overrideResponse?: Category | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Category> | Category)) => {
  return http.post('*/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostCategoriesResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetCategoriesIdMockHandler = (overrideResponse?: Category | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Category> | Category)) => {
  return http.get('*/categories/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetCategoriesIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutCategoriesIdMockHandler = (overrideResponse?: Category | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Category> | Category)) => {
  return http.put('*/categories/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutCategoriesIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCategoriesIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/categories/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getCategoriesMock = () => [
  getGetCategoriesMockHandler(),
  getPostCategoriesMockHandler(),
  getGetCategoriesIdMockHandler(),
  getPutCategoriesIdMockHandler(),
  getDeleteCategoriesIdMockHandler()
]
