/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Expense App API
 * MVP Áî®„ÅÆÊúÄÂ∞èÂÆ∂Ë®àÁ∞ø API„ÄÇ
Ë™çË®º„ÅØ JWTÔºàBearer „Éà„Éº„ÇØ„É≥ÔºâÊñπÂºè„ÄÇ

 * OpenAPI spec version: 0.1.2
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AccountDeleteRequest,
  PasswordChangeRequest,
  PasswordChangeResponse,
  User
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Ëá™ÂàÜ„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */
export const getUserMe = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/user/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserMeQueryKey = () => {
    return [`/user/me`] as const;
    }

    
export const getGetUserMeQueryOptions = <TData = Awaited<ReturnType<typeof getUserMe>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserMe>>> = ({ signal }) => getUserMe(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUserMe>>>
export type GetUserMeQueryError = void


export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMe>>,
          TError,
          Awaited<ReturnType<typeof getUserMe>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserMe>>,
          TError,
          Awaited<ReturnType<typeof getUserMe>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ëá™ÂàÜ„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */

export function useGetUserMe<TData = Awaited<ReturnType<typeof getUserMe>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserMe>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const deleteUserMe = (
    accountDeleteRequest: AccountDeleteRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/user/me`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: accountDeleteRequest
    },
      options);
    }
  


export const getDeleteUserMeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserMe>>, TError,{data: AccountDeleteRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserMe>>, TError,{data: AccountDeleteRequest}, TContext> => {

const mutationKey = ['deleteUserMe'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserMe>>, {data: AccountDeleteRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteUserMe(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserMe>>>
    export type DeleteUserMeMutationBody = AccountDeleteRequest
    export type DeleteUserMeMutationError = void

    /**
 * @summary „Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const useDeleteUserMe = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserMe>>, TError,{data: AccountDeleteRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserMe>>,
        TError,
        {data: AccountDeleteRequest},
        TContext
      > => {

      const mutationOptions = getDeleteUserMeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary „Éë„Çπ„ÉØ„Éº„ÉâÂ§âÊõ¥
 */
export const putUserPassword = (
    passwordChangeRequest: PasswordChangeRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PasswordChangeResponse>(
      {url: `/user/password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: passwordChangeRequest
    },
      options);
    }
  


export const getPutUserPasswordMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserPassword>>, TError,{data: PasswordChangeRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putUserPassword>>, TError,{data: PasswordChangeRequest}, TContext> => {

const mutationKey = ['putUserPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUserPassword>>, {data: PasswordChangeRequest}> = (props) => {
          const {data} = props ?? {};

          return  putUserPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUserPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof putUserPassword>>>
    export type PutUserPasswordMutationBody = PasswordChangeRequest
    export type PutUserPasswordMutationError = void

    /**
 * @summary „Éë„Çπ„ÉØ„Éº„ÉâÂ§âÊõ¥
 */
export const usePutUserPassword = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserPassword>>, TError,{data: PasswordChangeRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putUserPassword>>,
        TError,
        {data: PasswordChangeRequest},
        TContext
      > => {

      const mutationOptions = getPutUserPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    